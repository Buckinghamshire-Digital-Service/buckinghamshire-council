# Generated by Django 2.2.10 on 2020-02-07 13:35

import django.db.models.deletion
import modelcluster.fields
from django.db import migrations, models
from django.utils.text import slugify


def slug_is_available(slug, job_category_model, job_category=None):
    """
    Determine whether the given slug is available for use and not a duplicate
    """
    JobCategory = job_category_model
    siblings = JobCategory.objects.all()
    if job_category:
        siblings = siblings.exclude(id=job_category.id)

    return not siblings.filter(slug=slug).exists()


def get_autogenerated_slug(job_category, job_category_model):
    base_slug = slugify(job_category.title)
    if not base_slug:
        return

    candidate_slug = base_slug
    suffix = 1

    while not slug_is_available(candidate_slug, job_category_model, job_category):
        # try with incrementing suffix until we find a slug which is available
        suffix += 1
        candidate_slug = "%s-%d" % (base_slug, suffix)

    return candidate_slug


"""
Insert slugs for existing Job Category that doesn't have one set
"""


def update_jobcategory_slug(apps, schema_editor):
    JobCategory = apps.get_model("recruitment", "JobCategory")

    for category in JobCategory.objects.all():
        if not category.slug:
            category.slug = get_autogenerated_slug(category, JobCategory)
            category.save()


class Migration(migrations.Migration):

    dependencies = [
        ("recruitment", "0008_jobcategory_slug"),
    ]

    operations = [
        migrations.RunPython(
            update_jobcategory_slug, reverse_code=migrations.RunPython.noop
        )
    ]
