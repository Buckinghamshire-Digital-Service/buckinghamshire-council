# vim:set sw=2 ts=2 et:
# This is a sample .gitlab-ci.yml created by wagtail-kit.  You should review
# it for any necessary changes.

# Stages are groups that jobs can be groupped into.
# Jobs within each stage run in parallel and if one of them fails, the next
# stage won't be run.
# This will set up the following:
#
# - Build stage: build of static assets.
# - Test stage: code style, migration, basic configuration checks and unit
#   tests.
# - Deploy stage: deploy to Heroku.
stages:
  - build
  - test
  - deploy_site
  - pages

.cache_static:
  cache:
    key:
      files:
        - package-lock.json
        - bc/static_src
    paths:
      - ./node_modules
      - ./bc/static_compiled
    policy: pull

.node:
  image: node:12-alpine
  extends: .cache_static
  needs:
    - static

# Test if static assets can be built succesfully.
static:
  extends: .node
  needs: []
  stage: build
  before_script:
    - apk add --no-cache rsync
  script:
    - npm ci --no-optional --no-audit --progress=false
    - npm run build:prod
  cache:
    # Here only we want to write to the cache.
    policy: pull-push

# Check python code style.
flake8:
  image: python:3.7.4
  stage: test
  script:
    # Remember to update a version in requirements-dev.txt
    - pip install flake8==3.7.7
    - flake8 bc

# Check imports sort order, i.e. check whether they are in an alphabetical
# order and grouped properly.
isort:
  image: python:3.7.4
  stage: test
  before_script:
    # Remember to update a version in requirements-dev.txt
    - pip install isort==4.3.15
  script:
    - isort --check-only --diff --recursive bc

lint_js:
  extends: .node
  stage: test
  script:
    - npm run lint:js

lint_css:
  extends: .node
  stage: test
  script:
    - npm run lint:css

lint_format:
  extends: .node
  stage: test
  script:
    - npm run lint:format

# Run black and check for changes
black:
  image: python:3.7
  stage: test
  before_script:
    # Remember to update a version in requirements-dev.txt
    - pip install black==22.3.0
  script:
    - black --check ./

# Check settings, migrations and run tests.
test_python:
  # Make sure this Python version matches the version in your Dockerfile.
  image: python:3.7.4
  extends: .cache_static
  stage: test
  needs:
    - static
  services:
    # Make sure this matches the Postgres version you run on your servers.
    - postgres:13.3
  variables:
    # Run tests with the production settings.
    DJANGO_SETTINGS_MODULE: bc.settings.production

    # SECRET_KEY is required by Django to start.
    SECRET_KEY: fake_secret_key_to_run_tests

    # Silence RECAPTCHA
    RECAPTCHA_PUBLIC_KEY: 'dummy-key-value'
    RECAPTCHA_PRIVATE_KEY: 'dummy-key-value'

    # Some settings are used in constants
    RESPOND_COMPLAINTS_WEBSERVICE: 'TestCreateComplaints'
    RESPOND_FOI_WEBSERVICE: 'TestCreateFOI'
    RESPOND_SAR_WEBSERVICE: 'TestCreateSAR'
    RESPOND_COMMENTS_WEBSERVICE: 'TestCreateComments'
    RESPOND_COMPLIMENTS_WEBSERVICE: 'TestCreateCompliments'
    RESPOND_DISCLOSURES_WEBSERVICE: 'TestCreateDisclosures'

    # Postgres credentials
    POSTGRES_USER: db_user
    POSTGRES_PASSWORD: db_pass # pragma: allowlist secret

    # This is the URL used by databases on our CI.
    DATABASE_URL: postgres://db_user:db_pass@postgres/postgres # pragma: allowlist secret

    # Don't redirect to HTTPS in tests.
    SECURE_SSL_REDIRECT: 'false'
  before_script:
    # Install requirements
    - pip install wheel
    - pip install -r requirements.txt
  script:
    # We need to run the collectstatic command, because we use ManifestStaticFilesStorage.
    # Otherwise the check command will fail
    - python manage.py collectstatic --verbosity 0 --noinput --clear

    # Run system checks
    - python manage.py check

    # Check for missing migrations
    - python manage.py makemigrations --check --noinput

    # Create cache table.
    - python manage.py createcachetable

    # Run back-end tests
    - python manage.py test

test_js:
  extends: .node
  stage: test
  script:
    # Run front-end tests
    - npm run test:coverage

.heroku_deployment_template: &heroku_deployment_template
  image: curlimages/curl:latest
  stage: deploy_site
  script:
    - 'echo "Deploying to Heroku. To see progress, go to: https://dashboard.heroku.com/apps/$HEROKU_APP/activity"'
    - curl --fail-with-body -s -X POST -m 900 https://heroku-deploy.torchbox.com/$HEROKU_APP/$CI_COMMIT_SHA?key=$DEPLOYMENT_KEY

# Deploy to the staging server.
deploy_staging:
  # We use Debian image because Heroku has a lot of dependencies and is well
  # supported on Debian based distributions.
  image: debian:stretch
  stage: deploy_site
  variables:
    # Your app's name.
    #   $ heroku apps - t torchbox
    HEROKU_APP: buckinghamshire-staging
  only:
    - staging
  <<: *heroku_deployment_template

# Deploy to the production site.
deploy_production:
  # We use Debian image because Heroku has a lot of dependencies and is well
  # supported on Debian based distributions.
  image: debian:stretch
  stage: deploy_site
  variables:
    # Your app's name.
    #   $ heroku apps - t torchbox
    HEROKU_APP: buckinghamshire-production
  only:
    - master
  when: manual
  <<: *heroku_deployment_template

# Deploy to the content prep site.
deploy_content_prep:
  # We use Debian image because Heroku has a lot of dependencies and is well
  # supported on Debian based distributions.
  image: debian:stretch
  stage: deploy_site
  variables:
    # Your app's name.
    #   $ heroku apps - t torchbox
    HEROKU_APP: buckinghamshire-content-prep
  only:
    - master
  when: manual
  <<: *heroku_deployment_template

pages:
  image: python:3.6
  stage: pages
  only:
    - master
  script:
    # Include CHANGELOG in the docs
    - cp CHANGELOG.md docs/changelog.md
    - pip install -r requirements-docs.txt
    - mkdocs build
    - mv site/* public
  artifacts:
    paths:
      - public
